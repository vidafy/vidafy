@using WebExtension.Services.ZiplingoEngagementService.Model; 
@using System.Web;


@{
    ViewData["Title"] = "ZiplingoEngagementSetting";
}
@{
    ZiplingoEngagementSettings settingsModel = ViewBag.Message.settings;
    List<ZiplingoEventSettings> eventSettingsModel = ViewBag.Message.eventSettings;
}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
</head>

<div class="ziplingosettingcontainer">
    <div class="row">
        <div class="col-sm-6">
            <div class="panel panel-primary">
                <div class="panel-heading">ZiplingoEngagement</div>
                <div class="panel-body">
                    <form id="ZiplingoEngagement-settings">
                        <div class="form-group inputPanel">
                            <label>Company Name</label>
                            <input type="text" id="CompanyName" name="CompanyName" value="@settingsModel.CompanyName" class="form-control" autocomplete="off">
                        </div>
                        <div class="form-group inputPanel">
                            <label>Api Url</label>
                            <input type="text" id="ApiUrl" name="ApiUrl" value="@settingsModel.ApiUrl" class="form-control" autocomplete="off">
                        </div>
                        <div class="form-group inputPanel">
                            <label>Username</label>
                            <input type="text" id="Username" name="Username" value="@settingsModel.Username" class="form-control" autocomplete="off">
                        </div>
                        <div class="form-group inputPanel">
                            <label>Password</label>
                            <input type="text" id="Password" name="Password" value="@settingsModel.Password" class="form-control" autocomplete="off">
                        </div>
                        <div class="form-group inputPanel">
                            <label>Company Logo Url</label>
                            <input type="text" id="LogoUrl" name="LogoUrl" value="@settingsModel.LogoUrl" class="form-control" autocomplete="off">
                        </div>
                    </form>
                    <form id="ZiplingoEventSettings-settings">
                        @for (int i = 0; i < eventSettingsModel.Count; i++)
                        {
                            <div class="form-group inputPanel">
                                <label for="@eventSettingsModel[i].eventKey" class="">Allow @eventSettingsModel[i].eventKey Trigger</label><br />
                                <select style="padding: 5px 5px;" id="@eventSettingsModel[i].eventKey" class="triggerselectdialog" name="@eventSettingsModel[i].eventKey">
                                    <option value="false">No</option>
                                    <option value="true">Yes</option>
                                </select>
                                <p class="help-block">Check if you want to allow @eventSettingsModel[i].eventKey trigger.</p>
                            </div>
                        }
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-10 col-md-9">
            <button id="ZiplingoEngagement-save" class="btn btn-primary">Save Changes</button>
            <button id="ZiplingoEngagement-spinner" class="btn btn-primary disabled" style="display:none;"><i class="fa fa-spin fa-spinner"></i>&nbsp;&nbsp;Saving Changes</button>
        </div>
    </div>
</div>



@section Scripts{
    <script>

        let changedEvents = [];
        $('select').on('change', function ($event) {
            let idx = changedEvents.findIndex(ce => ce.eventKey == $event.target.id)
            if (idx != -1) {
                changedEvents[idx].status = $event.target.value == 'false' ? false : true;
            }
            else {
                changedEvents.push({ eventKey: $event.target.id, status: $event.target.value == 'false' ? false : true});
            }
        });


        $('#ZiplingoEngagement-save').click(function () {
            $('#ZiplingoEngagement-save').hide();
            $('#ZiplingoEngagement-spinner').show();

            var ZiplingoEngagementSettings = $("#ZiplingoEngagement-settings").serialize().split("&");
            var ZiplingoEngagementSettingsObj = {};
            for (var key in ZiplingoEngagementSettings) {
                ZiplingoEngagementSettingsObj[ZiplingoEngagementSettings[key].split("=")[0]] = ZiplingoEngagementSettings[key].split("=")[1];
            }
            
            ZiplingoEngagementSettingsObj.ApiUrl = decodeURIComponent(ZiplingoEngagementSettingsObj.ApiUrl)
            ZiplingoEngagementSettingsObj.LogoUrl = decodeURIComponent(ZiplingoEngagementSettingsObj.LogoUrl)

            changedEvents.forEach(e => {
                $.ajax({
                    type: "POST",
                    contentType: "application/json",
                    url: "/api/CustomPageApi/UpdateZiplingoEventSettings",
                    data: JSON.stringify(e),
                    dataType: "json",
                    complete: function (resp) {
                        var output = resp.responseJSON;
                    }
                })
            });

            $.ajax({
                type: "POST",
                contentType: "application/json",
                url: "/api/CustomPageApi/UpdateZiplingoEngagementSettings",
                data: JSON.stringify(ZiplingoEngagementSettingsObj),
                dataType: "json",
                complete: function (resp) {
                    var output = resp.responseJSON;
                    $('#ZiplingoEngagement-spinner').hide();
                    $('#ZiplingoEngagement-save').show();
                }
            })

            
            

            
        })


        var model = @Html.Raw(Json.Serialize(eventSettingsModel));
        
        for (let i = 0; i < model.length; i++) {
            if (model[i].status == true) {
                document.getElementsByClassName("triggerselectdialog")[i].value = model[i].status;
            }
        }

        

    </script>

}


